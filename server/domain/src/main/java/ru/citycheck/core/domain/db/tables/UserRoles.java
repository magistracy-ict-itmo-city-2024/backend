/*
 * This file is generated by jOOQ.
 */
package ru.citycheck.core.domain.db.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import ru.citycheck.core.domain.db.Indexes;
import ru.citycheck.core.domain.db.Public;
import ru.citycheck.core.domain.db.tables.records.UserRolesRecord;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class UserRoles extends TableImpl<UserRolesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_roles</code>
     */
    public static final UserRoles USER_ROLES = new UserRoles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserRolesRecord> getRecordType() {
        return UserRolesRecord.class;
    }

    /**
     * The column <code>public.user_roles.user_id</code>.
     */
    public final TableField<UserRolesRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.user_roles.role</code>.
     */
    public final TableField<UserRolesRecord, String> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR(32), this, "");

    private UserRoles(Name alias, Table<UserRolesRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserRoles(Name alias, Table<UserRolesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_roles</code> table reference
     */
    public UserRoles(String alias) {
        this(DSL.name(alias), USER_ROLES);
    }

    /**
     * Create an aliased <code>public.user_roles</code> table reference
     */
    public UserRoles(Name alias) {
        this(alias, USER_ROLES);
    }

    /**
     * Create a <code>public.user_roles</code> table reference
     */
    public UserRoles() {
        this(DSL.name("user_roles"), null);
    }

    public <O extends Record> UserRoles(Table<O> child, ForeignKey<O, UserRolesRecord> key) {
        super(child, key, USER_ROLES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_ROLES__USER_ROLE__IDX);
    }

    @Override
    public UserRoles as(String alias) {
        return new UserRoles(DSL.name(alias), this);
    }

    @Override
    public UserRoles as(Name alias) {
        return new UserRoles(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserRoles rename(String name) {
        return new UserRoles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserRoles rename(Name name) {
        return new UserRoles(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}

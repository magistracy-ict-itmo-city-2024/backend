/*
 * This file is generated by jOOQ.
 */
package ru.citycheck.core.domain.db.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import ru.citycheck.core.domain.db.Indexes;
import ru.citycheck.core.domain.db.Keys;
import ru.citycheck.core.domain.db.Public;
import ru.citycheck.core.domain.db.tables.records.IssueRecord;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Issue extends TableImpl<IssueRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.issue</code>
     */
    public static final Issue ISSUE = new Issue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IssueRecord> getRecordType() {
        return IssueRecord.class;
    }

    /**
     * The column <code>public.issue.id</code>.
     */
    public final TableField<IssueRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.issue.description</code>.
     */
    public final TableField<IssueRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.issue.status</code>.
     */
    public final TableField<IssueRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>public.issue.priority</code>.
     */
    public final TableField<IssueRecord, String> PRIORITY = createField(DSL.name("priority"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>public.issue.category_id</code>.
     */
    public final TableField<IssueRecord, Long> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.issue.reporter_id</code>.
     */
    public final TableField<IssueRecord, Long> REPORTER_ID = createField(DSL.name("reporter_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.issue.assignee_id</code>.
     */
    public final TableField<IssueRecord, Long> ASSIGNEE_ID = createField(DSL.name("assignee_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.issue.created_at</code>.
     */
    public final TableField<IssueRecord, Long> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.issue.updated_at</code>.
     */
    public final TableField<IssueRecord, Long> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.issue.document_path</code>.
     */
    public final TableField<IssueRecord, String> DOCUMENT_PATH = createField(DSL.name("document_path"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>public.issue.actuality_status</code>.
     */
    public final TableField<IssueRecord, String> ACTUALITY_STATUS = createField(DSL.name("actuality_status"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>public.issue.location_lat</code>.
     */
    public final TableField<IssueRecord, Double> LOCATION_LAT = createField(DSL.name("location_lat"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.issue.location_lon</code>.
     */
    public final TableField<IssueRecord, Double> LOCATION_LON = createField(DSL.name("location_lon"), SQLDataType.DOUBLE, this, "");

    private Issue(Name alias, Table<IssueRecord> aliased) {
        this(alias, aliased, null);
    }

    private Issue(Name alias, Table<IssueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.issue</code> table reference
     */
    public Issue(String alias) {
        this(DSL.name(alias), ISSUE);
    }

    /**
     * Create an aliased <code>public.issue</code> table reference
     */
    public Issue(Name alias) {
        this(alias, ISSUE);
    }

    /**
     * Create a <code>public.issue</code> table reference
     */
    public Issue() {
        this(DSL.name("issue"), null);
    }

    public <O extends Record> Issue(Table<O> child, ForeignKey<O, IssueRecord> key) {
        super(child, key, ISSUE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ISSUE_ASSIGNEE_ID_IDX, Indexes.ISSUE_REPORTER_ID_IDX, Indexes.ISSUE_STATUS_IDX);
    }

    @Override
    public Identity<IssueRecord, Long> getIdentity() {
        return (Identity<IssueRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<IssueRecord> getPrimaryKey() {
        return Keys.ISSUE_PKEY;
    }

    @Override
    public List<UniqueKey<IssueRecord>> getKeys() {
        return Arrays.<UniqueKey<IssueRecord>>asList(Keys.ISSUE_PKEY);
    }

    @Override
    public List<ForeignKey<IssueRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<IssueRecord, ?>>asList(Keys.ISSUE__ISSUE_CATEGORY_ID_FKEY, Keys.ISSUE__ISSUE_REPORTER_ID_FKEY, Keys.ISSUE__ISSUE_ASSIGNEE_ID_FKEY);
    }

    private transient Category _category;
    private transient Users _issueReporterIdFkey;
    private transient Users _issueAssigneeIdFkey;

    public Category category() {
        if (_category == null)
            _category = new Category(this, Keys.ISSUE__ISSUE_CATEGORY_ID_FKEY);

        return _category;
    }

    public Users issueReporterIdFkey() {
        if (_issueReporterIdFkey == null)
            _issueReporterIdFkey = new Users(this, Keys.ISSUE__ISSUE_REPORTER_ID_FKEY);

        return _issueReporterIdFkey;
    }

    public Users issueAssigneeIdFkey() {
        if (_issueAssigneeIdFkey == null)
            _issueAssigneeIdFkey = new Users(this, Keys.ISSUE__ISSUE_ASSIGNEE_ID_FKEY);

        return _issueAssigneeIdFkey;
    }

    @Override
    public Issue as(String alias) {
        return new Issue(DSL.name(alias), this);
    }

    @Override
    public Issue as(Name alias) {
        return new Issue(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Issue rename(String name) {
        return new Issue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Issue rename(Name name) {
        return new Issue(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, String, String, String, Long, Long, Long, Long, Long, String, String, Double, Double> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}

/*
 * This file is generated by jOOQ.
 */
package ru.citycheck.core.domain.db.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.citycheck.core.domain.db.Indexes;
import ru.citycheck.core.domain.db.Keys;
import ru.citycheck.core.domain.db.Public;
import ru.citycheck.core.domain.db.tables.records.JwtTokensRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JwtTokens extends TableImpl<JwtTokensRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.jwt_tokens</code>
     */
    public static final JwtTokens JWT_TOKENS = new JwtTokens();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JwtTokensRecord> getRecordType() {
        return JwtTokensRecord.class;
    }

    /**
     * The column <code>public.jwt_tokens.jwt_token</code>.
     */
    public final TableField<JwtTokensRecord, String> JWT_TOKEN = createField(DSL.name("jwt_token"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>public.jwt_tokens.expiration_ts</code>.
     */
    public final TableField<JwtTokensRecord, Long> EXPIRATION_TS = createField(DSL.name("expiration_ts"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.jwt_tokens.user_id</code>.
     */
    public final TableField<JwtTokensRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.jwt_tokens.type</code>.
     */
    public final TableField<JwtTokensRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(16), this, "");

    /**
     * The column <code>public.jwt_tokens.revoked</code>.
     */
    public final TableField<JwtTokensRecord, Boolean> REVOKED = createField(DSL.name("revoked"), SQLDataType.BOOLEAN, this, "");

    private JwtTokens(Name alias, Table<JwtTokensRecord> aliased) {
        this(alias, aliased, null);
    }

    private JwtTokens(Name alias, Table<JwtTokensRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.jwt_tokens</code> table reference
     */
    public JwtTokens(String alias) {
        this(DSL.name(alias), JWT_TOKENS);
    }

    /**
     * Create an aliased <code>public.jwt_tokens</code> table reference
     */
    public JwtTokens(Name alias) {
        this(alias, JWT_TOKENS);
    }

    /**
     * Create a <code>public.jwt_tokens</code> table reference
     */
    public JwtTokens() {
        this(DSL.name("jwt_tokens"), null);
    }

    public <O extends Record> JwtTokens(Table<O> child, ForeignKey<O, JwtTokensRecord> key) {
        super(child, key, JWT_TOKENS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.JWT_TOKENS__EXPIRATION_TS__IDX, Indexes.JWT_TOKENS__TOKEN__IDX, Indexes.JWT_TOKENS__USER_ID__IDX);
    }

    @Override
    public List<UniqueKey<JwtTokensRecord>> getKeys() {
        return Arrays.<UniqueKey<JwtTokensRecord>>asList(Keys.JWT_TOKENS_JWT_TOKEN_KEY);
    }

    @Override
    public JwtTokens as(String alias) {
        return new JwtTokens(DSL.name(alias), this);
    }

    @Override
    public JwtTokens as(Name alias) {
        return new JwtTokens(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JwtTokens rename(String name) {
        return new JwtTokens(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JwtTokens rename(Name name) {
        return new JwtTokens(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, Long, Long, String, Boolean> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
